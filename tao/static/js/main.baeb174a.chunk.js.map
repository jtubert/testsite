{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Transition","React","forwardRef","props","ref","react_default","a","createElement","Slide","Object","assign","direction","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","dense","marginTop","menu","width","App","classes","_React$useState","useState","_React$useState2","slicedToArray","open","setOpen","_React$useState3","_React$useState4","_React$useState5","name","result","disabledButton","_React$useState6","values","setValues","handleClose","predict","_ref","asyncToGenerator","regenerator_default","mark","_callee","input","url","response","json","wrap","_context","prev","next","fetch","sent","abrupt","stop","_x","apply","this","arguments","handleSubmit","_ref2","_callee2","_context2","objectSpread","defineProperty","console","log","className","noValidate","autoComplete","TextField","onChange","event","target","value","id","label","style","margin","placeholder","variant","Button","disabled","color","onClick","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.baeb174a.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\n//https://material-ui.com/components/text-fields/\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction App() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [values, setValues] = React.useState({\n    name: '',\n    result: '',\n    disabledButton:false\n  });\n\n  function handleClickOpen(event) {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  const predict = async (input) => {\n    const url = 'https://wt-jtubert-hotmail_com-0.sandbox.auth0-extend.com/tao-proxy?input='+input;\n    const response = await fetch(url);\n    const json = await response.json();\n    return json.result;\n  }\n  \n  const handleChange = name => event => {\n    setValues({ ...values, [name]: event.target.value });\n  };\n\n  const handleSubmit = async () => {\n    setValues({ ...values, ['disabledButton']: true });\n    console.log('Your input value is: ' + values.name);\n    \n    const result = await predict(values.name);\n    console.log(result);\n    setValues({ ...values, ['result']: result });\n    handleClickOpen();\n\n    //setValues({ ...values, ['disabledButton']: false });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form className={classes.container} noValidate autoComplete=\"off\">\n          <TextField\n            onChange={handleChange('name')}\n            id=\"outlined-full-width\"\n            label=\"Predict\"\n            style={{ margin: 20 }}\n            className={classes.textField}\n            placeholder=\"What is love?\"\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button disabled={values.disabledButton}variant=\"contained\" color=\"primary\" onClick={handleSubmit} >\n          Predict\n          </Button>\n        </form>\n\n        <Dialog\n          open={open}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">{\"Result:\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              {values.result}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Dismiss\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </header>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  dense: {\n    marginTop: theme.spacing(2),\n  },\n  menu: {\n    width: 200,\n  },\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}