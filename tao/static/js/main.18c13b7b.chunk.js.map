{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Transition","React","forwardRef","props","ref","react_default","a","createElement","Slide","Object","assign","direction","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","dense","marginTop","menu","width","root","formControl","margin","minWidth","selectEmpty","App","classes","_React$useState","useState","_React$useState2","slicedToArray","open","setOpen","_React$useState3","name","length","model","result","disabledButton","_React$useState4","values","setValues","handleClose","predict","_ref","asyncToGenerator","regenerator_default","mark","_callee","input","modelName","fullUrl","response","json","wrap","_context","prev","next","fetch","mode","sent","abrupt","stop","_x","_x2","_x3","apply","this","arguments","_React$useState5","useRef","_React$useState6","useEffect","handleChange","str","event","objectSpread","defineProperty","target","value","handleSubmit","_ref2","_callee2","_context2","console","log","className","noValidate","autoComplete","TextField","onChange","id","label","style","placeholder","variant","FormControl","InputLabel","htmlFor","Select","oldValues","inputProps","MenuItem","Button","disabled","color","onClick","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18c13b7b.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport './App.css';\n\n//https://material-ui.com/components/text-fields/\n//https://github.com/facebook/create-react-app\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction App() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [values, setValues] = React.useState({\n    name: '',\n    length: '60',\n    model: 'Taoist books',\n    result: '',\n    disabledButton:false\n  });\n\n  function handleClickOpen(event) {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n  const predict = async (input, length, modelName) => {\n    let url;\n    if(modelName === \"Taoist books\"){\n      url = \"https://taoist-nga5sjqwkq-uc.a.run.app\";\n    }else{\n      url = \"https://tao-book-nga5sjqwkq-uc.a.run.app\";\n    }\n    const fullUrl = url + \"/predict?input=\" + input + \"&length=\" + length;\n    const response = await fetch(fullUrl, {mode: 'cors'});\n    const json = await response.json();\n    return json.result;\n  }\n\n  const inputLabel = React.useRef(null);\n  const [labelWidth, setLabelWidth] = React.useState(0);\n  React.useEffect(() => {\n    //setLabelWidth(inputLabel.current.offsetWidth);\n  }, []);\n  \n  const handleChange = str => event => {\n    setValues({ ...values, [str]: event.target.value });\n  };\n\n  function handleSelectChange(event) {\n    console.log(event.target.name);\n    setValues(oldValues => ({\n      ...oldValues,\n      [event.target.name]: event.target.value,\n    }));\n  }\n\n  const handleSubmit = async () => {\n    setValues({ ...values, ['disabledButton']: true });\n    console.log('Your input value is: ' + values.model);\n    \n    \n    const result = await predict(values.name, values.length, values.model);\n    console.log(result);\n    setValues({ ...values, ['result']: result });\n    handleClickOpen();\n    \n\n    //setValues({ ...values, ['disabledButton']: false });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <form className={classes.container} noValidate autoComplete=\"off\">\n          <TextField\n            onChange={handleChange('name')}\n            id=\"outlined-full-width\"\n            label=\"Predict\"\n            style={{ margin: 20, width: 250 }}\n            className={classes.textField}\n            placeholder=\"What is love?\"\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            onChange={handleChange('length')}\n            id=\"outlined-full-width\"\n            label=\"Length\"\n            style={{ margin: 20, width: 80 }}\n            className={classes.textField}\n            value={values.length}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n\n          <FormControl className={classes.formControl}>\n            <InputLabel htmlFor=\"model-simple\">Model</InputLabel>\n            <Select\n              value={values.model}\n              onChange={handleSelectChange}\n              inputProps={{\n                name: 'model',\n                id: 'model-simple',\n              }}\n            >\n              <MenuItem value=\"Taoist books\">Taoist books</MenuItem>\n              <MenuItem value=\"PJ book\">PJ book</MenuItem>\n          </Select>\n          </FormControl>\n\n          <Button disabled={values.disabledButton}variant=\"contained\" color=\"primary\" onClick={handleSubmit} >\n          Predict\n          </Button>\n        </form>\n\n        <Dialog\n          open={open}\n          TransitionComponent={Transition}\n          keepMounted\n          onClose={handleClose}\n          aria-labelledby=\"alert-dialog-slide-title\"\n          aria-describedby=\"alert-dialog-slide-description\"\n        >\n          <DialogTitle id=\"alert-dialog-slide-title\">{\"Result:\"}</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-slide-description\">\n              {values.result}\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"primary\">\n              Dismiss\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </header>\n    </div>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  dense: {\n    marginTop: theme.spacing(2),\n  },\n  menu: {\n    width: 200,\n  },\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  }\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}